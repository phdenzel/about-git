#+TITLE: About git and GitHub
#+AUTHOR: Philipp Denzel
#+EMAIL: phdenzel@physik.uzh.ch
#+WEBSITE: https://phdenzel.github.io/


# #+OPTIONS: author:nil
# #+OPTIONS: email:nil
#+OPTIONS: num:nil
# #+OPTIONS: toc:nil
# #+OPTIONS: date:nil
# #+OPTIONS: timestamp:nil

#+SETUPFILE: theme-readtheorg-local.setup


* What is git?

  - created by Linus Torvald (in 2005)
  - the origin of the name "git" depends on your mood:
    - random three-letter combination that is pronounceable and close to "get"
      (if you're impartial)
    - it's actually a word and means:
      - stupid
      - contemptible and despicable
      - simple
    - "global information tracker" (if you're in a good mood)
    - "goddamn idiotic truckload of sh*t" (if your mood is bad)
  - version control system
    - manage source code
    - history of changes
    - coordinate work with multiple collaborators
  - for me: combined with GitHub
    - backup
    - publish project's code
    - collaborations

*** What is GitHub?

    [[https://github.com/][GitHub]] is a web-based filehosting service using git

    - offers all of git's functionality
    - adds some own features
    - provides a "GUI"-like interface (for /terminal-shy individuals/)
    - currently hosting 28 million open-source repositories (57 million in total)

* How to install?

  - Linux: (if it doesn't come with the system already preinstalled)
    - apt-get/yum package manager
    - if you're brave enough: install from source: [[https://github.com/git/git][https://github.com/git/git]]
  - MacOS: preinstalled version is ancient!!!
    - homebrew, macports, etc.
    - get the installer from  [[https://git-scm.com/downloads][https://git-scm.com/downloads]]
  - Windows: 
    - get the installer from  [[https://git-scm.com/downloads][https://git-scm.com/downloads]]
    - [[file:win-gitinstall.webm][Install it like this...]]


* Five most important commands you should remember

  #+BEGIN_SRC bash
    git init
    git add
    git status
    git commit -m "Cookies are awesome"
    git push  # and git pull
  #+END_SRC

  If you don't know/remember what those are try typing ~man gittutorial~ or ~man giteveryday~ in your terminal!

* Gotta-have-dot(files)

  - [[https://raw.githubusercontent.com/phdenzel/dotfiles/master/.gitconfig][~.gitconfig~]]
  - [[https://raw.githubusercontent.com/phdenzel/dotfiles/master/.gitignore][~.gitignore~]]


* Example

  To understand what git is and why you should use it, it's best to just give it a try.
  So open a terminal window and let's go!
  
  Initialize a git repository with
  #+BEGIN_SRC bash
    mkdir gitdemo && cd gitdemo
    git init
  #+END_SRC
  
  You'll (probably not) notice that a new directory ~.git~ appeared!
  Type ~ls -a~ to check...

  Let's create a file to start our new project

  #+BEGIN_SRC bash
    touch index.html
  #+END_SRC

  Write something in it to make it a more realistic test!
  For example:

  #+BEGIN_SRC bash
    cat <<EOF > index.html
    <!DOCTYPE html>

    <html>
      <head>
        <title>My awesome baking recipes</title>
      </head>
      <body>
        <ul class="cookies">
          <li>flour</li>
          <li>eggs</li>
          <li>butter</li>
          <li>sugar</li>
          <li>salt</li>
          <li>baking soda</li>
          <li>chocolate</li>
        </ul>
      </body>
    </html>
    EOF
  #+END_SRC

  Once we finished our work on the file, let's check the status of our repository...

  #+BEGIN_SRC bash
    git status
  #+END_SRC

  Git will respond with

  #+BEGIN_SRC
    On branch master

    No commits yet

    Untracked files:
      (use "git add <file>..." to include in what will be committed)

      index.html

      nothing added to commit but untracked files present (use "git add" to track)
  #+END_SRC

  It told us that it currently doesn't track changes in our new file ~index.html~.
  It will also propose what to do next with commands in ~("")~.
  So, let's add ~index.html~ to our git structure with

  #+BEGIN_SRC bash
    git add index.html
  #+END_SRC
  If multiple files were created and you'd want to add all of them at once, simply type ~git add .~.
  
  Now the status says:
  #+BEGIN_SRC
  On branch master

  No commits yet

  Changes to be committed:
    (use "git rm --cached <file>..." to unstage)

	        new file:   index.html
  #+END_SRC

  Now the file is recognized by git.
  Since we're happy with our file, let's commit its contents with

  #+BEGIN_SRC bash
    git commit -m "Initial commit"
  #+END_SRC

  Now the status shows

  #+BEGIN_SRC 
  On branch master
  nothing to commit, working tree clean
  #+END_SRC

  From now on, everytime you change ~index.html~, git will recognize those changes and compare to the previously logged (i.e. committed) version.
  To check, change the file contents of ~index.html~ somehow and look at the difference with

  #+BEGIN_SRC bash
    sed -i '16i\      <li>water</li>' index.html
    git diff index.html
  #+END_SRC

  To undo those changes simply type

  #+BEGIN_SRC bash
    git checkout -- index.html
  #+END_SRC

  Now that we have tried the recipe, eaten the cookies, and are confident that we don't want to change it, we're finally ready to upload our repository.
  To do that we need to create a repository on GitHub.
  This can be done manually (by signing in to GitHub, clicking on the "New repository" button, and following further instructions from GitHub).
  However, we're "browser-lazy", so we'll use GitHub's API to do the same from the terminal.
  Note: if you want to use the following two commands, sign up for an account at GitHub, replace ~phdenzel~ with your own GitHub username and ~gitdemo~ with your repository's name.
  #+BEGIN_SRC bash
    curl -u phdenzel https://api.github.com/user/repos -d "{\"name\":\"gitdemo\"}"
  #+END_SRC

  Check on GitHub if the repo was created.
  If so, you might notice that it is still empty.
  To add a /remote/, an off-site copy of the same repository with which to sync up, go back to the terminal and type:
  #+BEGIN_SRC bash
    git remote add origin git@github.com:phdenzel/gitdemo.git
    git remote -v
  #+END_SRC
  
  To sync up with your local repository simply type
  
  #+BEGIN_SRC bash
    git push -u origin master
  #+END_SRC

  And voila! Your file was uploaded to GitHub.
  You're now able to work on the repository, expand it, etc.
  After you worked on it, don't forget to add+commit your changes with ~git commit -a -m "Pizza recipe"~ and push the commits to GitHub with ~git push~.

*** Undo previous commit

  It often happens that you pushed something accidentally and want to revert to the previous commit.
  This can be achieved with

  #+BEGIN_SRC bash
    git reset HEAD^ --hard
    git push -f
  #+END_SRC


*** Merge conflicts

    Sometimes, pulls and pushes give rise to /merge conflicts/, especially if more than one person works on the same file.
    It happens when two lines have been changed to something else than what is expected from the remote.
    Unfortunately, this isn't automatically solved by git, so you have to fix each conflict by hand.
    Git will mark the lines with ~<<<<<<< HEAD~, ~>>>>>>> BRANCH-NAME~, and divide them with ~=======~.
    Just decide which version you like better and delete the rest, add+commit, and then push.


*** Checkpoint branching

    Another thing I find useful, is what I call /checkpoint branching/.
    Sometimes your project is in perfect shape, and you don't want to mess it up by changing something.
    The solution is to move to a different /branch/ and copy everything over.

    Look at all current branches with
    #+BEGIN_SRC bash
      git branch -a
    #+END_SRC


    Now check that you are on the ~master~ branch, branch off to a new one, and 
    #+BEGIN_SRC bash
      git checkout master
      git branch dev
    #+END_SRC

    Perform your experiment on the ~dev~ branch, where you don't hurt the ~master~ branch.
    Then add+commit, and push the entire branch to the remote
    #+BEGIN_SRC bash
      git add .
      git commit -a -m "Highly experimental"
      git push -u origin dev
    #+END_SRC

    Once you're finished and want to move everything to ~master~, merge them with

    #+BEGIN_SRC bash
      git checkout master
      git pull origin dev
      git push origin master
    #+END_SRC
